name: Lighthouse CI

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to run Lighthouse on'
        required: false
        default: 'http://localhost:4173'

permissions:
  issues: write
  contents: read

jobs:
  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: Install dependencies
        run: |
          pnpm install
          npm install -g @lhci/cli@0.14.x

      - name: Build project
        run: pnpm build

      - name: Start preview server
        run: |
          echo "🚀 Starting preview server..."
          pnpm preview --host 0.0.0.0 --port 4173 &
          sleep 10

          # 서버 상태 확인
          echo "Checking server status..."
          curl -I http://localhost:4173 || echo "❌ Server not responding"

          # 프로세스 확인
          echo "Checking running processes..."
          ps aux | grep vite || echo "No vite process found"

      - name: Run Lighthouse CI
        id: lighthouse
        continue-on-error: true
        run: |
          echo "🔍 Starting Lighthouse CI..."
          URL="${{ github.event.inputs.url || 'http://localhost:4173' }}"
          echo "Testing URL: $URL"

          # 서버 재확인
          curl -I $URL || echo "❌ Server not responding before Lighthouse"

          # Lighthouse CI 실행
          echo "Running Lighthouse CI..."
          lhci autorun --collect.url=$URL --verbose

          # 결과 확인
          echo "Lighthouse CI exit code: $?"
          ls -la .lighthouseci/ || echo "No .lighthouseci directory"

          # 생성된 JSON 파일 내용 확인 (디버깅용)
          if [ -d ".lighthouseci" ]; then
            echo "📊 Generated files:"
            for file in .lighthouseci/*.json; do
              if [ -f "$file" ]; then
                echo "=== Content of $file ==="
                head -50 "$file"
                echo "========================"
              fi
            done
          fi

      - name: Create GitHub Issue with Results
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const lhciDir = '.lighthouseci';
            const jsonReports = fs.readdirSync(lhciDir).filter(f => f.endsWith('.json'));
            console.log('📂 Available JSON reports:', jsonReports);

            const latestReport = jsonReports.sort().reverse()[0];
            console.log('📄 Using report:', latestReport);

            const reportPath = path.join(lhciDir, latestReport);
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

            // 디버깅: 리포트 구조 확인
            console.log('🔍 Report structure check:');
            console.log('- categories keys:', Object.keys(report.categories || {}));
            console.log('- audits keys:', Object.keys(report.audits || {}).slice(0, 10));
            console.log('- performance score:', report.categories?.performance?.score);
            console.log('- LCP value:', report.audits?.['largest-contentful-paint']?.numericValue);

            const formatScore = (value = 0) => {
              return Math.round(value * 100);
            };

            const getEmoji = (value, metric) => {
              const thresholds = {
                LCP: { good: 2500, needsImprovement: 4000 },
                INP: { good: 200, needsImprovement: 500 },
                CLS: { good: 0.1, needsImprovement: 0.25 },
              };

              if (!thresholds[metric]) return value >= 90 ? '🟢' : value >= 50 ? '🟠' : '🔴';

              const t = thresholds[metric];
              return value <= t.good ? '🟢' : value <= t.needsImprovement ? '🟠' : '🔴';
            };

            const formatMetric = (value, metric) => {
              if (!value) return 'N/A';
              if (metric === 'CLS') return value.toFixed(3);
              return `${(value / 1000).toFixed(2)}s`;
            };

            const getLighthouseResult = (report, category) => {
              try {
                return report.categories?.[category]?.score ?? 0;
              } catch (e) {
                return 0;
              }
            };

            const getMetricValue = (report, metric) => {
              try {
                return report.audits?.[metric]?.numericValue ?? 0;
              } catch (e) {
                return 0;
              }
            };

            const lighthouseScores = {
              performance: getLighthouseResult(report, 'performance'),
              accessibility: getLighthouseResult(report, 'accessibility'),
              'best-practices': getLighthouseResult(report, 'best-practices'),
              seo: getLighthouseResult(report, 'seo'),
              pwa: getLighthouseResult(report, 'pwa')
            };

            const webVitals = {
              LCP: getMetricValue(report, 'largest-contentful-paint'),
              INP: getMetricValue(report, 'experimental-interaction-to-next-paint'),
              CLS: getMetricValue(report, 'cumulative-layout-shift')
            };

            const reportUrl = `.lighthouseci/${latestReport.replace('.json', '.html')}`;

            const body = `## 🚨 웹사이트 성능 측정 결과

            ### 🎯 Lighthouse 점수
            | 카테고리 | 점수 | 상태 |
            |----------|------|------|
            | Performance | ${formatScore(lighthouseScores.performance)}% | ${getEmoji(formatScore(lighthouseScores.performance))} |
            | Accessibility | ${formatScore(lighthouseScores.accessibility)}% | ${getEmoji(formatScore(lighthouseScores.accessibility))} |
            | Best Practices | ${formatScore(lighthouseScores['best-practices'])}% | ${getEmoji(formatScore(lighthouseScores['best-practices']))} |
            | SEO | ${formatScore(lighthouseScores.seo)}% | ${getEmoji(formatScore(lighthouseScores.seo))} |
            | PWA | ${formatScore(lighthouseScores.pwa)}% | ${getEmoji(formatScore(lighthouseScores.pwa))} |

            ### 📊 Core Web Vitals (2024)
            | 메트릭 | 설명 | 측정값 | 상태 |
            |--------|------|--------|------|
            | LCP | Largest Contentful Paint | ${formatMetric(webVitals.LCP, 'LCP')} | ${getEmoji(webVitals.LCP, 'LCP')} |
            | INP | Interaction to Next Paint | ${formatMetric(webVitals.INP, 'INP')} | ${getEmoji(webVitals.INP, 'INP')} |
            | CLS | Cumulative Layout Shift | ${formatMetric(webVitals.CLS, 'CLS')} | ${getEmoji(webVitals.CLS, 'CLS')} |

            ### 📝 Core Web Vitals 기준값
            - **LCP (Largest Contentful Paint)**: 가장 큰 콘텐츠가 화면에 그려지는 시점 
              - 🟢 Good: < 2.5s
              - 🟠 Needs Improvement: < 4.0s
              - 🔴 Poor: ≥ 4.0s

            - **INP (Interaction to Next Paint)**: 사용자 상호작용에 대한 전반적인 응답성
              - 🟢 Good: < 200ms
              - 🟠 Needs Improvement: < 500ms
              - 🔴 Poor: ≥ 500ms

            - **CLS (Cumulative Layout Shift)**: 페이지 로드 중 예기치 않은 레이아웃 변경의 정도
              - 🟢 Good: < 0.1
              - 🟠 Needs Improvement: < 0.25
              - 🔴 Poor: ≥ 0.25

            > 📅 측정 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 웹사이트 성능 측정 결과 - ${new Date().toLocaleString('ko-KR', { 
                timeZone: 'Asia/Seoul',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
              })}`,
              body: body,
              labels: ['lighthouse-audit', 'web-vitals']
            });
